import os
import logging
import feedparser
from random import choice
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
ADD_IRONY = os.getenv("ADD_IRONY", "True") == "True"

feeds = [
    "https://lenta.ru/rss",
    "https://meduza.io/rss/all"
]

irony_lines = [
    "–ù—É, –∫–∞–∫ –≤–∞–º —Ç–∞–∫–æ–µ?",
    "–ê–ª–ª–æ, —ç—Ç–æ –¥–Ω–æ?",
    "–ì–¥–µ –º—ã –∏ –≥–¥–µ –ª–æ–≥–∏–∫–∞?",
    "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...",
    "ü§°"
]

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def get_news_message():
    for url in feeds:
        d = feedparser.parse(url)
        if d.entries:
            entry = d.entries[0]
            message = f"<b>{entry.title}</b>\n\n{entry.summary}\n\nüîó {entry.link}"
            if ADD_IRONY:
                message += f"\n\n<i>{choice(irony_lines)}</i>"
            return message
    return "ü§∑‚Äç‚ôÇÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏."

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
async def post_news_to_channel():
    message = get_news_message()
    await app.bot.send_message(chat_id=CHANNEL_ID, text=message, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test
async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = get_news_message()
    await update.message.reply_text(message, parse_mode="HTML")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = ApplicationBuilder().token(BOT_TOKEN).build()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏–∏
scheduler = BackgroundScheduler()
scheduler.add_job(lambda: app.create_task(post_news_to_channel()), 'interval', minutes=30)
scheduler.start()

# –ö–æ–º–∞–Ω–¥—ã
app.add_handler(CommandHandler("test", test_command))

# –°—Ç–∞—Ä—Ç
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app.run_polling()
