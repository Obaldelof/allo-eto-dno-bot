import os
import logging
import feedparser
from random import choice
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv
import asyncio
import datetime

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
ADD_IRONY = os.getenv("ADD_IRONY", "True") == "True"

bot = Bot(token=BOT_TOKEN)

irony_lines = [
    "–ù—É, –∫–∞–∫ –≤–∞–º —Ç–∞–∫–æ–µ?",
    "–ê–ª–ª–æ, —ç—Ç–æ –¥–Ω–æ?",
    "–ì–¥–µ –º—ã –∏ –≥–¥–µ –ª–æ–≥–∏–∫–∞?",
    "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...",
    "ü§°"
]

feeds = [
    "https://lenta.ru/rss",
    "https://meduza.io/rss/all",
    "https://ria.ru/export/rss2/archive/index.xml",
    "https://tass.ru/rss/v2.xml",
    "https://rssexport.rbc.ru/rbcnews/news/30/full.rss",
    "https://www.kommersant.ru/RSS/news.xml",
    "https://vc.ru/rss/all",
    "https://thebell.io/feed",
    "https://holod.media/feed/"
]

HISTORY_FILE = "last_news.txt"

def get_last_posted_links(limit=5):
    if not os.path.exists(HISTORY_FILE):
        return []
    with open(HISTORY_FILE, "r", encoding="utf-8") as f:
        return [line.strip() for line in f.readlines()][-limit:]

def save_posted_link(link: str):
    with open(HISTORY_FILE, "a", encoding="utf-8") as f:
        f.write(link + "\n")

from datetime import datetime
from email.utils import parsedate_to_datetime

def fetch_news():
    last_links = get_last_posted_links()
    newest_entry = None

    for url in feeds:
        d = feedparser.parse(url)
        if d.entries:
            for entry in d.entries:
                if entry.link in last_links:
                    continue

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                entry_date = None
                if 'published' in entry:
                    entry_date = parsedate_to_datetime(entry.published)
                elif 'updated' in entry:
                    entry_date = parsedate_to_datetime(entry.updated)
                else:
                    continue  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                if not newest_entry or entry_date > newest_entry["date"]:
                    newest_entry = {
                        "title": entry.title,
                        "summary": entry.summary,
                        "link": entry.link,
                        "date": entry_date
                    }

    if newest_entry:
        irony = choice(irony_lines)
        message = (
            f"üóû <b>{newest_entry['title']}</b>\n\n"
            f"{newest_entry['summary']}\n\n"
            f"üîó <a href='{newest_entry['link']}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>\n\n"
            f"<i>{irony}</i>\n\n"
            "‚Äî\n"
            "ü§° ü§¨ üò± ü§î ‚ù§Ô∏è\n\n"
            "<a href='https://t.me/alloetodno'>–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª</a>"
        )
        save_posted_link(newest_entry["link"])
        print(f"[{datetime.now()}] ‚úÖ –ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å: {newest_entry['title']}")
        return message

    print(f"[{datetime.now()}] ‚è≠ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–∂–µ –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã.")
    return None


async def scheduled_post():
    print(f"[{datetime.datetime.now()}] ‚è∞ scheduled_post() –≤—ã–∑–≤–∞–Ω")
    message = fetch_news()
    if message:
        try:
            await bot.send_message(chat_id=CHANNEL_ID, text=message, parse_mode="HTML")
            print(f"[{datetime.datetime.now()}] üì§ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª.")
        except Exception as e:
            print(f"[{datetime.datetime.now()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
    else:
        print(f"[{datetime.datetime.now()}] ‚è≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")

async def background_news_loop():
    while True:
        await scheduled_post()
        await asyncio.sleep(60)

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = fetch_news()
    if message:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode="HTML")
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("test", test_command))

    loop = asyncio.get_event_loop()
    loop.create_task(background_news_loop())

    app.run_polling()
